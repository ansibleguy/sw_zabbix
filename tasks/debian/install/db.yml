---

- name: Zabbix | Install | DB | Setting up MariaDB instance
  ansible.builtin.include_role:
    name: ansibleguy.infra_mariadb
  vars:
    mariadb:
      instances:
        zabbix: "{{ ZABBIX_MARIADB_INSTANCE }}"
  when: ZABBIX_CONFIG.manage.db | bool

- name: Zabbix | Install | DB | Checking for database config
  ansible.builtin.stat:
    path: "{{ ZABBIX_CONFIG.database.my_cnf }}"
  register: zbx_db_cnf_file

- name: Zabbix | Install | DB | Adding my.cnf
  ansible.builtin.copy:
    content: |
      # ansible_managed

      [client]
      socket={{ ZABBIX_MARIADB_INSTANCE.socket }}
      user={{ ZABBIX_CONFIG.database.user.server_proxy }}
      password="{{ ZABBIX_CONFIG.database.pwd.server_proxy }}"

    mode: 0640
    dest: "{{ ZABBIX_CONFIG.database.my_cnf }}"
    owner: 'root'
    group: 'root'
  when: >
    ZABBIX_CONFIG.database.update_password == 'always' or
    (force_pwd_change is defined and force_pwd_change) or
    not zbx_db_cnf_file.stat.exists

- name: Zabbix | Install | DB | Pulling existing database password
  ansible.builtin.shell: |
    set -o pipefail
    cat {{ ZABBIX_CONFIG.database.my_cnf }} | grep 'password' | cut -d '=' -f2- | tr -d \\\"
  register: zbx_db_pwd
  when: zbx_db_cnf_file.stat.exists
  check_mode: false
  changed_when: false

- name: Zabbix | Install | DB | Installing client
  ansible.builtin.apt:
    name: "{{ ZABBIX_HC.packages.mysql }}"
    state: present

- name: Zabbix | Install | DB | Checking if database is empty
  community.mysql.mysql_query:
    login_db: "{{ ZABBIX_CONFIG.database.name }}"
    query: "SELECT count(*) FROM information_schema.TABLES WHERE (TABLE_SCHEMA = '{{ ZABBIX_CONFIG.database.name }}')"
    login_unix_socket: "{{ ZABBIX_MARIADB_INSTANCE.socket }}"
    login_user: "{{ ZABBIX_CONFIG.database.user.server_proxy }}"
    login_password: "{{ zbx_db_pwd.stdout | default(ZABBIX_CONFIG.database.pwd.server_proxy) }}"
  ignore_errors: true
  register: zbx_db_empty
  when: ZABBIX_CONFIG.manage.db | bool
  check_mode: false

- name: Zabbix | Install | DB | Connection failed!
  ansible.builtin.fail:
    msg: "The role was unable to connect to the database!
    Try setting a 'static' password in your configuration. (zabbix.database.pwd.server_proxy)"
  when:
    - zbx_db_empty.failed is defined
    - zbx_db_empty.failed

- name: Zabbix | Install | DB | Preparing for schema import
  community.mysql.mysql_query:
    query: 'SET GLOBAL log_bin_trust_function_creators=1'
    login_unix_socket: "{{ ZABBIX_MARIADB_INSTANCE.socket }}"
    login_user: 'root'
    login_password: "{{ ZABBIX_CONFIG.database.pwd.server_proxy_root | default(omit) }}"
  when:
    - ZABBIX_CONFIG.manage.db | bool
    - zbx_db_empty['query_result'][0][0]['count(*)'] | int == 0
    - ZABBIX_CONFIG.version is version('6.2', '>=')

- name: Zabbix | Install | DB | Importing database schema
  community.mysql.mysql_db:
    name: "{{ ZABBIX_CONFIG.database.name }}"
    state: import
    force: true
    single_transaction: true
    use_shell: true  # else it will fail
    target: "{{ file_schema }}"
    login_unix_socket: "{{ ZABBIX_MARIADB_INSTANCE.socket }}"
    login_user: "{{ ZABBIX_CONFIG.database.user.server_proxy }}"
    login_password: "{{ zbx_db_pwd.stdout | default(ZABBIX_CONFIG.database.pwd.server_proxy) }}"
  when:
    - ZABBIX_CONFIG.manage.db | bool
    - zbx_db_empty['query_result'][0][0]['count(*)'] | int == 0

- name: Zabbix | Install | DB | Post-import task
  community.mysql.mysql_query:
    query: 'SET GLOBAL log_bin_trust_function_creators=0'
    login_unix_socket: "{{ ZABBIX_MARIADB_INSTANCE.socket }}"
    login_user: 'root'
    login_password: "{{ ZABBIX_CONFIG.database.pwd.server_proxy_root | default(omit) }}"
  when:
    - ZABBIX_CONFIG.manage.db | bool
    - zbx_db_empty['query_result'][0][0]['count(*)'] | int == 0
    - ZABBIX_CONFIG.version is version('6.2', '>=')

- name: Zabbix | Install | DB | Unmanaged DB
  ansible.builtin.pause:
    prompt: "Since this role is not managing the zabbix-database, you will need to import the database schema initially!
    This can be done like this when using a local database: 'zcat {{ file_schema }}
    | mysql --socket /run/mysqld/mysqld.sock -uroot -p {{ ZABBIX_CONFIG.database.name }}'.
    Make sure the schema is imported before continuing!"
  when: not ZABBIX_CONFIG.manage.db | bool
